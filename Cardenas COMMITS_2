#include <iostream>
#include <string>

using namespace std;

// Estructura base del nodo (renombrada a Proceso)
struct Proceso {
    int id;
    string nombre;
    Proceso* siguiente;
};

// Lista, cola y pila
Proceso* listaProcesos = nullptr;
Proceso* frenteColaCPU = nullptr;
Proceso* finalColaCPU = nullptr;
Proceso* cimaMemoria = nullptr;

// === FUNCIONES PARA LISTA DE PROCESOS ===
void registrarProceso(int id, const string& nombre) {
    Proceso* nuevo = new Proceso{id, nombre, listaProcesos};
    listaProcesos = nuevo;
    cout << "✔ Proceso registrado correctamente." << endl;
}

void mostrarProcesos() {
    if (!listaProcesos) {
        cout << "⚠ No hay procesos registrados." << endl;
        return;
    }

    cout << "\n📋 Lista de procesos registrados:" << endl;
    Proceso* temp = listaProcesos;
    while (temp) {
        cout << "   ➤ ID: " << temp->id << " | Nombre: " << temp->nombre << endl;
        temp = temp->siguiente;
    }
}

void eliminarProceso(int id) {
    Proceso* actual = listaProcesos;
    Proceso* anterior = nullptr;

    while (actual && actual->id != id) {
        anterior = actual;
        actual = actual->siguiente;
    }

    if (!actual) {
        cout << "❌ Proceso no encontrado." << endl;
        return;
    }

    if (!anterior) {
        listaProcesos = actual->siguiente;
    } else {
        anterior->siguiente = actual->siguiente;
    }

    delete actual;
    cout << "🗑 Proceso eliminado." << endl;
}

// === FUNCIONES PARA COLA ===
void agregarACola(int id, const string& nombre) {
    Proceso* nuevo = new Proceso{id, nombre, nullptr};

    if (!finalColaCPU) {
        frenteColaCPU = finalColaCPU = nuevo;
    } else {
        finalColaCPU->siguiente = nuevo;
        finalColaCPU = nuevo;
    }

    cout << "🟢 Proceso agregado a la cola." << endl;
}

void ejecutarSiguienteProceso() {
    if (!frenteColaCPU) {
        cout << "⛔ Cola vacía." << endl;
        return;
    }

    Proceso* temp = frenteColaCPU;
    cout << "⚙ Ejecutando proceso ➤ " << temp->nombre << " (ID: " << temp->id << ")" << endl;

    frenteColaCPU = frenteColaCPU->siguiente;
    delete temp;

    if (!frenteColaCPU) finalColaCPU = nullptr;
}

// === FUNCIONES PARA PILA ===
void asignarBloqueMemoria(int id) {
    Proceso* nuevo = new Proceso{id, "Bloque", cimaMemoria};
    cimaMemoria = nuevo;
    cout << "💾 Bloque de memoria asignado." << endl;
}

void liberarBloqueMemoria() {
    if (!cimaMemoria) {
        cout << "⚠ No hay bloques en memoria para liberar." << endl;
        return;
    }

    Proceso* temp = cimaMemoria;
    cout << "🔻 Liberando bloque con ID: " << temp->id << endl;
    cimaMemoria = cimaMemoria->siguiente;
    delete temp;
}

// === MENÚ PRINCIPAL ===
int main() {
    int opcion, id;
    string nombre;

    do {
        cout << "\n=== 🖥 GESTIÓN DE PROCESOS ===" << endl;
        cout << "1. Registrar proceso" << endl;
        cout << "2. Mostrar procesos" << endl;
        cout << "3. Eliminar proceso de lista" << endl;
        cout << "4. Agregar a Cola CPU" << endl;
        cout << "5. Ejecutar siguiente proceso" << endl;
        cout << "6. Asignar bloque de memoria (Pila)" << endl;
        cout << "7. Liberar bloque de memoria" << endl;
        cout << "8. Salir" << endl;
        cout << "Seleccione una opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                cout << "ID del proceso: ";
                cin >> id;
                cout << "Nombre del proceso: ";
                cin.ignore();
                getline(cin, nombre);
                registrarProceso(id, nombre);
                break;

            case 2:
                mostrarProcesos();
                break;

            case 3:
                cout << "ID del proceso a eliminar: ";
                cin >> id;
                eliminarProceso(id);
                break;

            case 4:
                cout << "ID del proceso: ";
                cin >> id;
                cout << "Nombre del proceso: ";
                cin.ignore();
                getline(cin, nombre);
                agregarACola(id, nombre);
                break;

            case 5:
                ejecutarSiguienteProceso();
                break;

            case 6:
                cout << "ID del bloque: ";
                cin >> id;
                asignarBloqueMemoria(id);
                break;

            case 7:
                liberarBloqueMemoria();
                break;

            case 8:
                cout << "👋 Saliendo del programa..." << endl;
                break;

            default:
                cout << "❗ Opción no válida." << endl;
        }

    } while (opcion != 8);

    return 0;
}
