Miembro* insertarMiembro(Miembro* nodo, int id, string nombre) {
        if (nodo == nullptr) {
            Miembro* nuevo = new Miembro{ id, nombre, nullptr, nullptr, 1 };
            return nuevo;
        }

        if (id < nodo->id)
            nodo->izquierdo = insertarMiembro(nodo->izquierdo, id, nombre);
        else if (id > nodo->id)
            nodo->derecho = insertarMiembro(nodo->derecho, id, nombre);
        else
            return nodo;

        nodo->altura = 1 + maximo(obtenerAltura(nodo->izquierdo), obtenerAltura(nodo->derecho));
        int balance = obtenerBalance(nodo);

        if (balance > 1 && id < nodo->izquierdo->id)
            return rotacionDerecha(nodo);
        if (balance < -1 && id > nodo->derecho->id)
            return rotacionIzquierda(nodo);
        if (balance > 1 && id > nodo->izquierdo->id) {
            nodo->izquierdo = rotacionIzquierda(nodo->izquierdo);
            return rotacionDerecha(nodo);
        }
        if (balance < -1 && id < nodo->derecho->id) {
            nodo->derecho = rotacionDerecha(nodo->derecho);
            return rotacionIzquierda(nodo);
        }

        return nodo;
    }

    Miembro* encontrarMinimo(Miembro* nodo) {
        Miembro* actual = nodo;
        while (actual->izquierdo != nullptr)
            actual = actual->izquierdo;
        return actual;
    }

    Miembro* eliminarMiembro(Miembro* raiz, int id) {
        if (raiz == nullptr) return raiz;

        if (id < raiz->id)
            raiz->izquierdo = eliminarMiembro(raiz->izquierdo, id);
        else if (id > raiz->id)
            raiz->derecho = eliminarMiembro(raiz->derecho, id);
        else {
            if ((raiz->izquierdo == nullptr) || (raiz->derecho == nullptr)) {
                Miembro* temp = raiz->izquierdo ? raiz->izquierdo : raiz->derecho;
                if (temp == nullptr) {
                    temp = raiz;
                    raiz = nullptr;
                } else {
                    *raiz = *temp;
                }
                delete temp;
            } else {
                Miembro* temp = encontrarMinimo(raiz->derecho);
                raiz->id = temp->id;
                raiz->nombre = temp->nombre;
                raiz->derecho = eliminarMiembro(raiz->derecho, temp->id);
            }
        }

        if (raiz == nullptr) return raiz;

        raiz->altura = 1 + maximo(obtenerAltura(raiz->izquierdo), obtenerAltura(raiz->derecho));
        int balance = obtenerBalance(raiz);

        if (balance > 1 && obtenerBalance(raiz->izquierdo) >= 0)
            return rotacionDerecha(raiz);
        if (balance > 1 && obtenerBalance(raiz->izquierdo) < 0) {
            raiz->izquierdo = rotacionIzquierda(raiz->izquierdo);
            return rotacionDerecha(raiz);
        }
        if (balance < -1 && obtenerBalance(raiz->derecho) <= 0)
            return rotacionIzquierda(raiz);
        if (balance < -1 && obtenerBalance(raiz->derecho) > 0) {
            raiz->derecho = rotacionDerecha(raiz->derecho);
            return rotacionIzquierda(raiz);
        }

        return raiz;
    }
