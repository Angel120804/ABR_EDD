#include <iostream>
#include <string.h>
using namespace std;

struct Nodo {
    int id;
    char nombre[50], fecha_nac[20], genero;
    Nodo *padre, *izq, *der;
    int altura;
};

Nodo* raiz = nullptr;
int altura(Nodo* n) { return n ? n->altura : 0; }
int max(int a, int b) { return a > b ? a : b; }
void actualizarAltura(Nodo* n) { if (n) n->altura = 1 + max(altura(n->izq), altura(n->der)); }
int fe(Nodo* n) { return n ? altura(n->izq) - altura(n->der) : 0; }

Nodo* rotDer(Nodo* y) {
    Nodo* x = y->izq, *T2 = x->der;
    x->der = y; y->izq = T2;
    actualizarAltura(y); actualizarAltura(x);
    return x;
}
Nodo* rotIzq(Nodo* x) {
    Nodo* y = x->der, *T2 = y->izq;
    y->izq = x; x->der = T2;
    actualizarAltura(x); actualizarAltura(y);
    return y;
}

Nodo* buscar(Nodo* n, int id) {
    if (!n || n->id == id) return n;
    return id < n->id ? buscar(n->izq, id) : buscar(n->der, id);
}

Nodo* insertar(Nodo* n, int id, const char* nom, const char* fnac, char gen, Nodo* padre) {
    if (!n) {
        Nodo* nuevo = new Nodo{id, "", "", gen, padre, nullptr, nullptr, 1};
        strcpy(nuevo->nombre, nom); strcpy(nuevo->fecha_nac, fnac);
        return nuevo;
    }
    if (id < n->id) n->izq = insertar(n->izq, id, nom, fnac, gen, padre);
    else if (id > n->id) n->der = insertar(n->der, id, nom, fnac, gen, padre);
    else return n;

    actualizarAltura(n);
    int balance = fe(n);
    if (balance > 1 && id < n->izq->id) return rotDer(n);
    if (balance < -1 && id > n->der->id) return rotIzq(n);
    if (balance > 1 && id > n->izq->id) { n->izq = rotIzq(n->izq); return rotDer(n); }
    if (balance < -1 && id < n->der->id) { n->der = rotDer(n->der); return rotIzq(n); }

    return n;
}

void inorden(Nodo* n) {
    if (n) {
        inorden(n->izq);
        cout << n->id << ": " << n->nombre << endl;
        inorden(n->der);
    }
}

void mostrarAncestros(Nodo* n) {
    while (n) {
        cout << "-> " << n->nombre << endl;
        n = n->padre;
    }
}

int main() {
    raiz = insertar(raiz, 10, "Juan", "01/01/1980", 'M', nullptr);
    raiz = insertar(raiz, 5, "Ana", "12/05/2005", 'F', buscar(raiz, 10));
    raiz = insertar(raiz, 15, "Carlos", "23/09/2010", 'M', buscar(raiz, 10));
    inorden(raiz);
    cout << "Ancestros de Carlos:\n"; mostrarAncestros(buscar(raiz, 15));
    return 0;
}
