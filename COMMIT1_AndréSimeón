#include <iostream>
#include <string.

using namespace std;

struct Nodo {
    int id;
    char nombre[50];         
    char fecha_nac[20];      
    char genero;            
    Nodo* padre;
    Nodo* izquierda;
    Nodo* derecha;
    int altura;
};

Nodo* raiz = NULL;

int main() {
    int opcion, id, idPadre;
    char nombre[50], fecha_nac[20], genero;

    do {
        cout << "\n=== ARBOL GENEALOGICO AVL ===" << endl;
        cout << "1. Insertar miembro" << endl;
        cout << "2. Buscar miembro" << endl;
        cout << "3. Eliminar miembro" << endl;
        cout << "4. Mostrar inorden" << endl;
        cout << "5. Mostrar preorden" << endl;
        cout << "6. Mostrar postorden" << endl;
        cout << "7. Mostrar ancestros" << endl;
        cout << "8. Verificar pertenencia a rama" << endl;
        cout << "9. Salir" << endl;
        cout << "Opcion: ";
        cin >> opcion;

        switch (opcion) {
            case 1: // Insertar miembro
                cout << "ID: ";
                cin >> id;

                cout << "Nombre: ";
                cin.ignore(); 
                cin.getline(nombre, 50);

                cout << "Fecha nacimiento (DD/MM/AAAA): ";
                cin.getline(fecha_nac, 20);

                cout << "Genero (M/F): ";
                cin >> genero;
                
                cout << "ID padre (-1 si no tiene): ";
                cin >> idPadre;
                if (idPadre != -1 && !buscarNodo(raiz, idPadre)) 
                    cout << "Error: Padre no encontrado!" << endl;
                } else {
                    // FALLO: se llama 2 veces a buscarNodo innecesariamente
                    Nodo* padreBio = idPadre == -1 ? nullptr : buscarNodo(raiz, idPadre);
                    
                    // FALLO: no se verifica si el ID ya existe en el Ã¡rbol
                    raiz = insertar(raiz, id, nombre, fecha_nac, genero, padreBio); // 
                    cout << "Miembro insertado correctamente." << endl;
                }
                break;

            case 2: // Buscar miembro
                cout << "ID a buscar: ";
                cin >> id;
                if (Nodo* encontrado = buscarNodo(raiz, id)) 
                    cout << "Encontrado: " << encontrado->nombre 
                         << " (Nacimiento: " << encontrado->fecha_nac 
                         << ", Genero: " << encontrado->genero << ")" << endl;
                } else {
                    cout << "Miembro no encontrado!" << endl;
                }
                break;

            case 3: // Eliminar miembro
                cout << "ID a eliminar: ";
                cin >> id;
                if (!buscarNodo(raiz, id)) { // 
                    cout << "Miembro no encontrado!" << endl;
                } else {
                    raiz = eliminar(raiz, id); // 
                    cout << "Miembro eliminado correctamente." << endl;
                }
                break;

            case 4: // Mostrar inorden
                cout << "\nRecorrido Inorden (ordenado por ID):\n";
                inorden(raiz); // 
                break;

            case 5: // Mostrar preorden
                cout << "\nRecorrido Preorden:\n";
                preorden(raiz); // 
                break;

            case 6: // Mostrar postorden
                cout << "\nRecorrido Postorden:\n";
                postorden(raiz); //
                break;

            case 7: // Mostrar ancestros
                cout << "ID del miembro: ";
                cin >> id;
                if (Nodo* encontrado = buscarNodo(raiz, id)) 
                    cout << "\nAncestros de " << encontrado->nombre << ":\n";
                    mostrarAncestros(encontrado->padre); 
                } else {
                    cout << "Miembro no encontrado!" << endl;
                }
                break;

            case 8: // Verificar pertenencia a rama
                int idRama;
                cout << "ID de la rama: ";
                cin >> idRama;
                cout << "ID del miembro: ";
                cin >> id;

                if (!buscarNodo(raiz, idRama)) { // 
                    cout << "Rama no encontrada!" << endl;
                } else if (enRama(buscarNodo(raiz, idRama), id)) { //
                    cout << "Pertenece a la rama!" << endl;
                } else {
                    cout << "NO pertenece a la rama!" << endl;
                }
                break;

            case 9:
                cout << "Saliendo..." << endl;
                break;

            default:
                cout << "Opcion invalida!" << endl;
        }
    } while (opcion != 9);

    return 0;
}
